import * as A from 'fp-ts/Applicative';
import { Kind, Kind2, Kind3, Kind4, URIS, URIS2, URIS3, URIS4 } from 'fp-ts/HKT';
export declare const sequenceFst: import("fp-ts/lib/Traversable").Sequence2<"ReadonlyTuple">;
export declare function sequenceSnd<F extends URIS4>(F: A.Applicative4<F>): <TE, S, R, FE, A>(ta: Readonly<[TE, Kind4<F, S, R, FE, A>]>) => Kind4<F, S, R, FE, Readonly<[TE, A]>>;
export declare function sequenceSnd<F extends URIS3>(F: A.Applicative3<F>): <TE, R, FE, A>(ta: Readonly<[TE, Kind3<F, R, FE, A>]>) => Kind3<F, R, FE, Readonly<[TE, A]>>;
export declare function sequenceSnd<F extends URIS3, FE>(F: A.Applicative3C<F, FE>): <TE, R, A>(ta: Readonly<[TE, Kind3<F, R, FE, A>]>) => Kind3<F, R, FE, Readonly<[TE, A]>>;
export declare function sequenceSnd<F extends URIS2>(F: A.Applicative2<F>): <TE, FE, A>(ta: Readonly<[TE, Kind2<F, FE, A>]>) => Kind2<F, FE, Readonly<[TE, A]>>;
export declare function sequenceSnd<F extends URIS2, FE>(F: A.Applicative2C<F, FE>): <TE, A>(ta: Readonly<[TE, Kind2<F, FE, A>]>) => Kind2<F, FE, Readonly<[TE, A]>>;
export declare function sequenceSnd<F extends URIS>(F: A.Applicative1<F>): <TE, A>(ta: Readonly<[TE, Kind<F, A>]>) => Kind<F, Readonly<[TE, A]>>;
export declare const traverseFst: import("fp-ts/lib/Traversable").PipeableTraverse2<"ReadonlyTuple">;
export declare function traverseSnd<F extends URIS3>(F: A.Applicative3<F>): <A, FR, FE, B>(f: (a: A) => Kind3<F, FR, FE, B>) => <TE>(ta: Readonly<[TE, A]>) => Kind3<F, FR, FE, Readonly<[TE, B]>>;
export declare function traverseSnd<F extends URIS2>(F: A.Applicative2<F>): <A, FE, B>(f: (a: A) => Kind2<F, FE, B>) => <TE>(ta: Readonly<[TE, A]>) => Kind2<F, FE, Readonly<[TE, B]>>;
export declare function traverseSnd<F extends URIS2, FE>(F: A.Applicative2C<F, FE>): <A, B>(f: (a: A) => Kind2<F, FE, B>) => <TE>(ta: Readonly<[TE, A]>) => Kind2<F, FE, Readonly<[TE, B]>>;
export declare function traverseSnd<F extends URIS>(F: A.Applicative1<F>): <A, B>(f: (a: A) => Kind<F, B>) => <TE>(ta: Readonly<[TE, A]>) => Kind<F, Readonly<[TE, B]>>;
